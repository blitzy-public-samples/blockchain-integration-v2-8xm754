# Stage 1: Build
FROM node:14-alpine AS build

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy all files
COPY . .

# Build the application
RUN npm run build

# Stage 2: Production
FROM nginx:alpine

# Copy built assets from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

# Human tasks:
# TODO: Optimize the Node.js build process for faster builds
# TODO: Implement multi-stage builds to reduce the final image size
# TODO: Add health check instructions to the Dockerfile
# TODO: Implement proper handling of environment variables for different deployment environments
# TODO: Add security scanning of the Docker image as part of the build process
# TODO: Implement caching mechanisms for npm packages to speed up builds
# TODO: Add version labels to the Docker image for better tracking
# TODO: Implement a non-root user for running the Nginx server
# TODO: Add compression for static assets in the Nginx configuration
# TODO: Implement Content Security Policy headers in the Nginx configuration