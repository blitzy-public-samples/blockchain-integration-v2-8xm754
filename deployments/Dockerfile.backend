# Stage 1: Build
FROM golang:1.16-alpine AS build

# Set the working directory
WORKDIR /app

# Install git for fetching dependencies
RUN apk add --no-cache git

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies
RUN go mod download

# Copy the source code
COPY . .

# Build the application
RUN go build -o main ./cmd/api

# Stage 2: Production
FROM alpine:latest

# Install CA certificates for HTTPS
RUN apk --no-cache add ca-certificates

# Set the working directory
WORKDIR /root/

# Copy the binary from the build stage
COPY --from=build /app/main .

# Copy the config directory
COPY --from=build /app/config ./config

# Expose port 8080
EXPOSE 8080

# Run the binary
CMD ["./main"]

# Human tasks:
# TODO: Implement proper error handling and logging in the Go application
# TODO: Add health check endpoint in the Go application
# TODO: Implement graceful shutdown for the Go application
# TODO: Add version information to the built binary
# TODO: Implement proper handling of environment variables
# TODO: Add security scanning of the Docker image as part of the build process
# TODO: Implement a non-root user for running the Go application
# TODO: Add multi-arch build support for the Docker image
# TODO: Implement caching of Go modules to speed up builds
# TODO: Add support for running database migrations on startup